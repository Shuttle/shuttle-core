import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.bd43fc14.js";
const __pageData = '{"title":"Shuttle.Core.Container","description":"","frontmatter":{"title":"Shuttle.Core.Container","layout":"api"},"headers":[{"level":2,"title":"IComponentRegistry","slug":"icomponentregistry"},{"level":3,"title":"Lifestyle","slug":"lifestyle"},{"level":3,"title":"Registering all dependency implementations","slug":"registering-all-dependency-implementations"},{"level":3,"title":"Register","slug":"register"},{"level":2,"title":"IComponentResolver","slug":"icomponentresolver"},{"level":3,"title":"Resolve","slug":"resolve"},{"level":2,"title":"Bootstrapping","slug":"bootstrapping"},{"level":3,"title":"IComponentRegistryBootstrap","slug":"icomponentregistrybootstrap"},{"level":3,"title":"IComponentResolverBootstrap","slug":"icomponentresolverbootstrap"},{"level":2,"title":"Implementations","slug":"implementations"}],"relativePath":"container/shuttle-core-container.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="shuttle-core-container" tabindex="-1">Shuttle.Core.Container <a class="header-anchor" href="#shuttle-core-container" aria-hidden="true">#</a></h1><div class="language-"><pre><code>PM&gt; Install-Package Shuttle.Core.Container\n</code></pre></div><p>In the dependency injection (DI) world there appears to be somewhat of a trend to separate registration and resolution of components. Some containers have an explicit split while others do not allow any registrations after the first instance resolution.</p><p>To this end the <code>Shuttle.Core.Container</code> package provides two interfaces that relate to dependency injection containers. The <code>IComponentRegistry</code> defines the registration of dependencies while the <code>IComponentResolver</code> defines the resolution of dependencies.</p><p>Typically there would be no need to directly reference this package unless you are developing an adapter to a dependency injection container. Instead you would reference one of the implementations directly.</p><h2 id="icomponentregistry" tabindex="-1">IComponentRegistry <a class="header-anchor" href="#icomponentregistry" aria-hidden="true">#</a></h2><h3 id="lifestyle" tabindex="-1">Lifestyle <a class="header-anchor" href="#lifestyle" aria-hidden="true">#</a></h3><div class="language-"><pre><code>public enum Lifestyle\n{\n    Singleton = 0,Transient = 1\n}\n</code></pre></div><p>When registering a dependency type with an implementation type you can specify one of the above lifestyles for your component:</p><ul><li>Singleton: only a single instance is created and that instance is returned for any call to <code>Resolve</code> the service type.</li><li>Transient: a new instance of the implementation type is returned for each call to <code>Resolve</code> the service type.</li></ul><h3 id="registering-all-dependency-implementations" tabindex="-1">Registering all dependency implementations <a class="header-anchor" href="#registering-all-dependency-implementations" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegisterAll</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">assemblyName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Lifestyle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Singleton</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">public static void RegisterAll</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Assembly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">assembly</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Lifestyle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Singleton</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Register all interfaces in the given assembly, that have not yet been registered, that have a single implementation as a regular dependency. All interfaces that have more than 1 implementation are registered as collections.</p><p>This method differes from the usual convention in that there is no <code>AttemptRegisterAll</code> method.</p><h3 id="register" tabindex="-1">Register <a class="header-anchor" href="#register" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Register</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dependencyType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">implementationType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Registers a dependency by type with the relevant lifestyle.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Register</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dependencyType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">instance</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Registers the given singleton instance against the dependency type.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegisterCollection</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dependencyType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">implementationTypes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Registers a collection of implementation types against the relevant dependency type using the given lifestyle. Collections are a somewhat unique case and need to be registered as such.</p><h4 id="extensions" tabindex="-1">Extensions <a class="header-anchor" href="#extensions" aria-hidden="true">#</a></h4><p>There are a number of extension methods that facilitate the registration of components:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">IsRegistered</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependency</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Will return <code>true</code> if the dependency is registered; else <code>false</code>.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Register</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependency</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TImplementation</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a new dependency/implementation type pair as a singleton.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Register</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependency</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TImplementation</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a new dependency/implementation type pair with the given <code>Lifestyle</code>.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Register</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependencyImplementation</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a new dependency/implementation type pair by binding the implementation type to itself.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegisterInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependency</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TDependency</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">instance</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a singleton instance for the given dependency type.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Register</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dependencyType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">implementationType</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a new dependency/implementation type pair as a singleton.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependency</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TImplementation</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a new dependency/implementation type pair as a singleton if the dependency has not yet been registered; else does nothing.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependency</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TImplementation</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a new dependency/implementation type pair as a singleton if the dependency has not yet been registered; else does nothing.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependency</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TImplementation</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a new dependency/implementation type pair if the dependency has not yet been registered; else does nothing.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependencyImplementation</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a new dependency/implementation type pair as a singleton if the dependency has not yet been registered; else does nothing.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependencyImplementation</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a new dependency/implementation type pair if the dependency has not yet been registered; else does nothing.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependencyImplementation</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a new dependency/implementation type pair if the dependency has not yet been registered; else does nothing.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependencyImplementation</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a new dependency/implementation type pair if the dependency has not yet been registered; else does nothing.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependencyImplementation</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a new dependency/implementation type pair with then given <code>Lifestyle</code> if the dependency has not yet been registered; else does nothing.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptRegisterInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TDependency</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TDependency</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">instance</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers a singleton instance for the given dependency type if the dependency has not yet been registered; else does nothing.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptRegisterGeneric</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dependencyType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">implementationType</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers an open generic for the given dependency type as a singleton if the dependency has not yet been registered; else does nothing.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptRegisterGeneric</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dependencyType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">implementationType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers an open generic for the given dependency type if the dependency has not yet been registered; else does nothing.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegisterSuffixed</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">assemblyName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Lifestyle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Singleton</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">public static void RegisterSuffixed</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Assembly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">assembly</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Lifestyle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Singleton</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Register all types in the given assembly that end in the <code>DefaultSuffixes</code> against a dependency type matching the type name with an <code>I</code> prefix, e.g. <code>CustomerRepository</code> will be registered against <code>ICustomerRepository</code>.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegisterSuffixed</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">assemblyName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;string&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">suffixes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Lifestyle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Singleton</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">public static void RegisterSuffixed</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Assembly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">assembly</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;string&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">suffixes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">lifestyle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Lifestyle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Singleton</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Register all types in the given assembly that end in the given <code>suffixes</code> against a dependency type matching the type name with an <code>I</code> prefix, e.g. <code>CustomerRepository</code> will be registered against <code>ICustomerRepository</code>.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Register</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Assembly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">assembly</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Func</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">shouldRegister</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Func</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">getDependencyType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Func</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lifestyle</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">getLifestyle</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Registers all the types in the given assembly that satisfies the <code>shouldRegister</code> function against the type returned from the <code>getDependencyType</code> function.</p><h2 id="icomponentresolver" tabindex="-1">IComponentResolver <a class="header-anchor" href="#icomponentresolver" aria-hidden="true">#</a></h2><h3 id="resolve" tabindex="-1">Resolve <a class="header-anchor" href="#resolve" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#89DDFF;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Resolve</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dependencyType</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>The requested dependency type will be resolved by returning the relevant instance of the implementation type.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;object&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ResolveAll</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dependencyType</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>All instances of the requested dependency type will be resolved.</p><h4 id="extensions-1" tabindex="-1">Extensions <a class="header-anchor" href="#extensions-1" aria-hidden="true">#</a></h4><p>There are a couple of extension methods available to facilitate the resolving of dependencies:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Resolve</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentResolver</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">resolver</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Resolves the requested service type. If the service type cannot be resolved an exception is thrown.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptResolve</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentResolver</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">resolver</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">public static object AttemptResolve</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentResolver</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">resolver</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dependencyType</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Attempts to resolve the requested service type. If the service type cannot be resolved null is returned.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;object&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Resolve</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentResolver</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">resolver</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dependencyTypes</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Resolves all the given types. These may be types that will not necessarily be injected into another class but that may require other instances from the resolver.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ResolveAll</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentResolver</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">resolver</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Resolves all registered instances of the requested service type.</p><p><a name="Bootstrapping"></a></p><h2 id="bootstrapping" tabindex="-1">Bootstrapping <a class="header-anchor" href="#bootstrapping" aria-hidden="true">#</a></h2><p>It is important to note that your bootstrap implementations should be idempotent as they <em>may</em> be called more than once in some instances.</p><p>You can control the bootstrapping behaviour using and implementation of the <code>IBootstrapConfiguration</code>. The <code>BootstrapSection</code> can provide a default <code>BootstrapConfiguration</code> instance for the following application configuration options:</p><div class="language-xml"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">configuration</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">configSections</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bootstrap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shuttle.Core.Container.BootstrapSection, Shuttle.Core.Container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">configSections</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">bootstrap</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scan</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">All|Shuttle|None</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">assemblies</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">add</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shuttle.Module1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">add</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shuttle.Module2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">assemblies</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">bootstrap</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">configuration</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>In addition a <code>ComponentResolver</code> implementation of the <code>IComponentResolver</code> interface is registered when using bootstrapping. This is a proxy to the actual implementation of the <code>IComponentResolver</code> interface and forwards the relevant calls to the assigned instance.</p><p><em><strong>Note</strong></em>: Avoid using the service locator anti-pattern by injecting <code>IComponentResolver</code> in order to obtain singleton services. Instead the intention is to use the <code>IComponentResolver</code> as a factory for transient instances where creating another interface may be superfluous.</p><p><a name="IComponentRegistryBootstrap"></a></p><h3 id="icomponentregistrybootstrap" tabindex="-1">IComponentRegistryBootstrap <a class="header-anchor" href="#icomponentregistrybootstrap" aria-hidden="true">#</a></h3><p>You can call the <code>IComponentRegistry.RegistryBootstrap()</code> extension method to bootstrap registrations. This method will instance any classes that implement the <code>IComponentRegistryBootstrap</code> interface and call the <code>Register(IComponentRegistry registry)</code> method within that instance. The implementation has to have a default constructor.</p><p>Example:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bootstrap</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentRegistryBootstrap</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_registryBootstrapCalled</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Register</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        Guard</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AgainstNull</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">nameof</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">_registryBootstrapCalled</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsRegistered</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDependencyType</span><span style="color:#89DDFF;">&gt;())</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">            registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AttemptRegisterInstance</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ImplementationInstance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IAnotherDependency</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImplementationType</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        _registryBootstrapCalled </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>You may also make use of the registry&#39;s configuration section to specify explicit registrations and to disable scanning of assemblies (which defaults to <code>true</code>):</p><div class="language-xml"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">configuration</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">configSections</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">componentRegistry</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shuttle.Core.Container.ComponentRegistrySection, Shuttle.Core.Container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">configSections</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">componentRegistry</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scan</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true|false</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">add</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">dependencyType</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shuttle.Module1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">add</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">dependencyType</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shuttle.Module2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">collections</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">collection</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">dependencyType</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">IPlugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">add</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">implementationType</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Plugin1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">add</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">implementationType</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Plugin2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">add</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">implementationType</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Plugin3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">collection</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">collections</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">componentRegistry</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">configuration</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p><a name="IComponentResolverBootstrap"></a></p><h3 id="icomponentresolverbootstrap" tabindex="-1">IComponentResolverBootstrap <a class="header-anchor" href="#icomponentresolverbootstrap" aria-hidden="true">#</a></h3><p>You can call the <code>IComponentResolver.ResolverBootstrap()</code> extension method to bootstrap resolving components. This method will instance any classes that implement the <code>IComponentResolverBootstrap</code> interface and call the <code>Resolve(IComponentResolver resolver)</code> method within that instance. The implementation has to have a default constructor.</p><p>Example:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bootstrap</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComponentResolverBootstrap</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_resolverBootstrapCalled</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Resolve</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IComponentResolver</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">resolver</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        Guard</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AgainstNull</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">resolver</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">nameof</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">resolver</span><span style="color:#89DDFF;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">_resolverBootstrapCalled</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        resolver</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Resolve</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDependencyType</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        _resolverBootstrapCalled </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>You may be wondering why one would need to resolve instances. If you happen to have an instance that has dependencies but is not a dependency itself then you would need to resolve it in order to inject the relevant implementations. This is particularly useful in framework/plug-in architectures.</p><p>In addition you may also use the following configuration section to specify explicit resolutions and to disable scanning of assemblies (which defaults to <code>true</code>):</p><div class="language-xml"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">configuration</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">configSections</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">componentResolver</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shuttle.Core.Container.ComponentResolverSection, Shuttle.Core.Container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">configSections</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">componentResolver</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scan</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true|false</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">add</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">dependencyType</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shuttle.Module1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">add</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">dependencyType</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shuttle.Module2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">componentResolver</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">configuration</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p><a name="Supported"></a></p><h2 id="implementations" tabindex="-1">Implementations <a class="header-anchor" href="#implementations" aria-hidden="true">#</a></h2><p>The following implementations can be used <em>out-of-the-box</em>:</p><ul><li><a href="https://github.com/Shuttle/Shuttle.Core.Castle" target="_blank" rel="noopener noreferrer">WindsorContainer</a></li><li><a href="https://github.com/Shuttle/Shuttle.Core.Ninject" target="_blank" rel="noopener noreferrer">Ninject</a></li><li><a href="https://github.com/Shuttle/Shuttle.Core.Autofac" target="_blank" rel="noopener noreferrer">AutoFac</a></li><li><a href="https://github.com/Shuttle/Shuttle.Core.StructureMap" target="_blank" rel="noopener noreferrer">StructureMap</a></li><li><a href="https://github.com/Shuttle/Shuttle.Core.SimpleInjector" target="_blank" rel="noopener noreferrer">SimpleInjector</a></li><li><a href="https://github.com/Shuttle/Shuttle.Core.Unity" target="_blank" rel="noopener noreferrer">Unity</a></li></ul><p>If you don&#39;t see your container of choice here please <a href="https://github.com/Shuttle/Shuttle.Core.Container/issues/new" target="_blank" rel="noopener noreferrer">log an issue</a> or share your own implementation.</p>', 106);
const _hoisted_107 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_107);
}
var shuttleCoreContainer = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, shuttleCoreContainer as default };
