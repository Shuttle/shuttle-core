import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.f4c87288.js";
const __pageData = '{"title":"Shuttle.Core.Cli","description":"","frontmatter":{},"headers":[{"level":2,"title":"Constructor","slug":"constructor"},{"level":2,"title":"Checking for values","slug":"checking-for-values"},{"level":2,"title":"Getting values","slug":"getting-values"},{"level":2,"title":"Argument definitions","slug":"argument-definitions"}],"relativePath":"infrastructure/shuttle-core-cli.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="shuttle-core-cli" tabindex="-1">Shuttle.Core.Cli <a class="header-anchor" href="#shuttle-core-cli" aria-hidden="true">#</a></h1><div class="language-"><pre><code>PM&gt; Install-Package Shuttle.Core.Cli\n</code></pre></div><p>Provides the <code>Arguments</code> class that gives you access to command-line interface arguments:</p><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h2><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Arguments</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">params </span><span style="color:#89DDFF;">string[]</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">commandLine</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>The <code>commandLine</code> is parsed as arguments starting with <code>-</code>, <code>--</code> or <code>/</code> followed by the argument name then either <code>=</code> or <code>:</code> and then the argument value.</p><p>The following are valid arguments:</p><div class="language-batch"><pre><code><span class="line"><span style="color:#A6ACCD;">-name=value</span></span>\n<span class="line"><span style="color:#A6ACCD;">--name=value</span></span>\n<span class="line"><span style="color:#A6ACCD;">/name=value</span></span>\n<span class="line"><span style="color:#A6ACCD;">-name:value</span></span>\n<span class="line"><span style="color:#A6ACCD;">--name:value</span></span>\n<span class="line"><span style="color:#A6ACCD;">/name:value</span></span>\n<span class="line"></span></code></pre></div><p>The argument name and value may be <em>quoted</em> with either a single quote (<code>&#39;</code>) or double quote (<code>&quot;</code>).</p><p>An <code>Arguments</code> instance may be constructed from the <code>Environment.GetCommandLineArgs()</code> values using the <code>Arguments.FromCommandLine()</code> static factory method.</p><h2 id="checking-for-values" tabindex="-1">Checking for values <a class="header-anchor" href="#checking-for-values" aria-hidden="true">#</a></h2><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Contains</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Returns <code>true</code> if the given argument <code>name</code> is found; else <code>false</code>.</p><h2 id="getting-values" tabindex="-1">Getting values <a class="header-anchor" href="#getting-values" aria-hidden="true">#</a></h2><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">public T Get&lt;T&gt;</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">@default</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Returns the value of the given argument <code>name</code> as type <code>T</code>. If the argument <code>name</code> cannot be found the value given as <code>@default</code> will be returned. If not <code>@default</code> is specified an <code>InvalidOperationException</code> is thrown.</p><h2 id="argument-definitions" tabindex="-1">Argument definitions <a class="header-anchor" href="#argument-definitions" aria-hidden="true">#</a></h2><p>You can add <code>ArgumentDefinition</code> entries to an <code>Arguments</code> instance by using the following method:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Arguments</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">ArgumentDefinition</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">definition</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Argument definitions must have unique keys and if aliases are used these too have to be unique across definitions. Duplicate aliases within the same argument definition will be ignored.</p><p>An argument definition may be marked as required by calling the <code>AsRequired()</code> method which will set the <code>IsRequired</code> property to <code>true</code>. You can then call the <code>HasMissingValues()</code> method on the <code>Arguments</code> class which will return <code>true</code> is there are any required arguments that have not been specified using either the proper name or an alias.</p>', 21);
const _hoisted_22 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_22);
}
var shuttleCoreCli = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, shuttleCoreCli as default };
