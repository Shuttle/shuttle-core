import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.f4c87288.js";
const __pageData = '{"title":"Shuttle.Core.Threading","description":"","frontmatter":{"title":"Shuttle.Core.Threading","layout":"api"},"headers":[{"level":2,"title":"ProcessorThreadPool","slug":"processorthreadpool"}],"relativePath":"infrastructure/shuttle-core-threading.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="shuttle-core-threading" tabindex="-1">Shuttle.Core.Threading <a class="header-anchor" href="#shuttle-core-threading" aria-hidden="true">#</a></h1><div class="language-"><pre><code>PM&gt; Install-Package Shuttle.Core.Threading\n</code></pre></div><p>Provides various classes and interfaces to facilitate thread-based processing.</p><h2 id="processorthreadpool" tabindex="-1">ProcessorThreadPool <a class="header-anchor" href="#processorthreadpool" aria-hidden="true">#</a></h2><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ProcessorThreadPool</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">threadCount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IProcessorFactory</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">processorFactory</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Each thread pool has a <code>name</code> used only for identyfing the pool and for logging. The <code>threadCount</code> is specified and will run a <code>Thread</code> that calls the <code>IProcessor.Execute(CancellationToken cancellationToken)</code> instance provided by the <code>IProcessorFactory.Create()</code> method in a loop while the <code>cancellationToken.IsCancellationRequested</code> returns <code>false</code>.</p>', 6);
const _hoisted_7 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_7);
}
var shuttleCoreThreading = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, shuttleCoreThreading as default };
