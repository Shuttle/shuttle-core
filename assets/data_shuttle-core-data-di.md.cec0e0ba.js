import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.f4c87288.js";
const __pageData = '{"title":"Shuttle.Core.Data (Dependency Injection)","description":"","frontmatter":{"title":"Shuttle.Core.Data (Dependency Injection)","layout":"api"},"headers":[],"relativePath":"data/shuttle-core-data-di.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="dependency-injection" tabindex="-1">Dependency Injection <a class="header-anchor" href="#dependency-injection" aria-hidden="true">#</a></h1><p>When using a dependency injection container there are a couple of things that need to be wired up. The following describes that required wiring in a container agnostic way:</p><table><thead><tr><th>Interface</th><th>Implementation</th><th>Comments</th></tr></thead><tbody><tr><td>IDatabaseContextCache</td><td>ThreadStaticDatabaseContextCache</td><td>Use this in Windows Service / Console solutions (such as when using the Shuttle.Core.Host).</td></tr><tr><td></td><td>ContextDatabaseContextCache</td><td>Use this in a Web / Web-Api / WCF scenario. Contained in the Shuttle.Core.Data.Http package.</td></tr><tr><td>IDatabaseGateway</td><td>DatabaseGateway</td><td></td></tr><tr><td>IDatabaseContextFactory</td><td>DatabaseContextFactory</td><td></td></tr><tr><td>IDbConnectionFactory</td><td>DbConnectionFactory</td><td></td></tr><tr><td>IDbCommandFactory</td><td>DbCommandFactory</td><td></td></tr><tr><td>IDataRepository&lt;&gt;</td><td>typeof (DataRepository&lt;&gt;)</td><td>Your container should support an open generic construct.</td></tr><tr><td>All Classes</td><td>typeof (IDataRowMapper&lt;&gt;)</td><td>Your container should be able to find all open generic implementations of the <code>IDataRowMapper&lt;T&gt;</code> interface</td></tr></tbody></table><p>When using the <a href="http://shuttle.github.io/shuttle-core/overview-container/#Bootstrapping" target="_blank" rel="noopener noreferrer">container bootstrapping</a> and you have referenced <code>Shuttle.Core.Data</code> the following registrations will be attempted:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IConnectionConfigurationProvider</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ConnectionConfigurationProvider</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDatabaseContextCache</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ThreadStaticDatabaseContextCache</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDatabaseContextFactory</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DatabaseContextFactory</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDbConnectionFactory</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DbConnectionFactory</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDbCommandFactory</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DbCommandFactory</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDatabaseGateway</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DatabaseGateway</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AttemptRegister</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IQueryMapper</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">QueryMapper</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"></span></code></pre></div><p>If you need to use another specific implementation of <code>IDatabaseContextCache</code> remember to register that before the bootstrapping code.</p><p>You may also want to use the <code>IComponentRegistry.RegisterSuffixed()</code> extension method to register data, and other, components that end with the following default suffixes:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#89DDFF;">&lt;string&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DefaultSuffixes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#89DDFF;">&lt;string&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Query</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Repository</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Provider</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Service</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Task</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Factory</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Mapper</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Cache</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">};</span></span>\n<span class="line"></span></code></pre></div>', 8);
const _hoisted_9 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_9);
}
var shuttleCoreDataDi = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, shuttleCoreDataDi as default };
