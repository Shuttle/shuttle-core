import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.f4c87288.js";
const __pageData = '{"title":"Shuttle.Core.Transactions","description":"","frontmatter":{"title":"Shuttle.Core.Transactions","layout":"api"},"headers":[{"level":2,"title":"Properties","slug":"properties"},{"level":3,"title":"Name","slug":"name"},{"level":2,"title":"Methods","slug":"methods"},{"level":3,"title":"Complete","slug":"complete"},{"level":2,"title":"Create","slug":"create"},{"level":2,"title":"Configuration Section","slug":"configuration-section"}],"relativePath":"infrastructure/shuttle-core-transactions.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="shuttle-core-transactions" tabindex="-1">Shuttle.Core.Transactions <a class="header-anchor" href="#shuttle-core-transactions" aria-hidden="true">#</a></h1><div class="language-"><pre><code>PM&gt; Install-Package Shuttle.Core.Transactions\n</code></pre></div><p>This package makes use of the .Net <code>TransactionScope</code> class to provide ambient transaction handling. .Net Core 2.0 does not yet support ambient transactions and you would need to handle any transactions yourself. To this end you would need to return a <code>NullTransactionScope</code> from the <code>ITransactionScopeFactory</code> implementation. If you are using the <code>DefaultTransactionScopeFactory</code> then you can simply set the <code>enabled</code> attribute to <code>false</code>.</p><h1 id="itransactionscope" tabindex="-1">ITransactionScope <a class="header-anchor" href="#itransactionscope" aria-hidden="true">#</a></h1><p>An implementation of the <code>ITransactionScope</code> interface is used to wrap a <code>TransactionScope</code>.</p><p>The <code>DefaultTransactionScope</code> makes use of the standard .NET <code>TransactionScope</code> functionality. There is also a <code>NullTransactionScope</code> that implements the null pattern so it implements the interface but does not do anything.</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h2><h3 id="name" tabindex="-1">Name <a class="header-anchor" href="#name" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#A6ACCD;">string Name </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>Returns the name of the transaction scope. This is helpful with logging.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><h3 id="complete" tabindex="-1">Complete <a class="header-anchor" href="#complete" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Complete</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"></span></code></pre></div><p>Marks the transaction scope as complete.</p><h1 id="itransactionscopefactory" tabindex="-1">ITransactionScopeFactory <a class="header-anchor" href="#itransactionscopefactory" aria-hidden="true">#</a></h1><p>An implementation of the <code>ITransactionScopeFactory</code> interface provides instances of an <code>ITransactionScope</code> implementation.</p><p>The <code>DefaultTransactionScopeFactory</code> provides a <code>DefaultTransactionScope</code> instance if transactions are <code>Enabled</code>; else an instance of <code>NullTransactionScope</code> is provided.</p><h2 id="create" tabindex="-1">Create <a class="header-anchor" href="#create" aria-hidden="true">#</a></h2><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">ITransactionScope</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Create</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#FFCB6B;">ITransactionScope</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Create</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IsolationLevel</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">isolationLevel</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TimeSpan</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">timeout</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#FFCB6B;">ITransactionScope</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Create</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"><span style="color:#FFCB6B;">ITransactionScope</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Create</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IsolationLevel</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">isolationLevel</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TimeSpan</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">timeout</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Creates the relevant instance using the given parameters.</p><h2 id="configuration-section" tabindex="-1">Configuration Section <a class="header-anchor" href="#configuration-section" aria-hidden="true">#</a></h2><p>There is also a configuration section that can be used:</p><div class="language-xml"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">configuration</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">configSections</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transactionScope</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shuttle.Core.Transactions.TransactionScopeSection, Shuttle.Core.Transactions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">configSections</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">transactionScope</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">enabled</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">false</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">isolationLevel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">RepeatableRead</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">timeoutSeconds</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">300</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">configuration</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>Call the static <code>TransactionScopeSection.Get()</code> method to return the configuration.</p>', 24);
const _hoisted_25 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_25);
}
var shuttleCoreTransactions = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, shuttleCoreTransactions as default };
