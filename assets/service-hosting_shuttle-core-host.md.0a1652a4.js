import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.e4936249.js";
var _imports_0 = "/shuttle-core/images/host-debug.png";
const __pageData = '{"title":"Shuttle.Core.Host","description":"","frontmatter":{},"headers":[{"level":2,"title":"IHost","slug":"ihost"},{"level":2,"title":"Service Name","slug":"service-name"},{"level":2,"title":"Display Name","slug":"display-name"},{"level":2,"title":"Uninstall","slug":"uninstall"},{"level":2,"title":"Example","slug":"example"},{"level":2,"title":"WindowsServiceInstaller","slug":"windowsserviceinstaller"}],"relativePath":"service-hosting/shuttle-core-host.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="shuttle-core-host" tabindex="-1">Shuttle.Core.Host <a class="header-anchor" href="#shuttle-core-host" aria-hidden="true">#</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>Please Note:</strong> <em>This package is now obsolete. Please make use of <code>Shuttle.Core.WorkerService</code></em></p></div><div class="language-"><pre><code>PM&gt; Install-Package Shuttle.Core.Host\n</code></pre></div><p>The generic host is an executable assembly used to execute code either within a console window or as a Windows service. Since it can host your code while running in Visual Studio it makes debugging very easy. No need to attach a debugger to a Windows service.</p><p>A typical implementation would be the following:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> Shuttle.Core.Host</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> Domain</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Server</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DomainHost</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IHost</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IDisposable</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">volatile</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">active</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Start</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">active</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// perform some processing</span></span>\n<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Dispose</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">            active </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>When the generic host is executed it searches for all classes that implement the <code>IHost</code>. It needs to find exactly 1 class implementing the interface else it fails with an exception. If you <em>do</em> have more than one type implementing the interface you can specify the interface using an argument:</p><div class="language-"><pre><code>/hostType=&quot;assembly qualified name&quot;\n</code></pre></div><p>In order to debug applications that use the <code>IHost</code> interface you would simply need to set the <code>Shuttle.Core.Host.exe</code> as the startup application for your project:</p><p><img src="' + _imports_0 + '" alt="" title="Host Debug"></p><p>You would probably want to use some thread-base processing but that is up to you.</p><p>Notice the <code>IDisposable</code> implementation. Whenever a service is stopped, or <code>ctrl+c</code> pressed for a console application, the <code>IHost</code> instance is safe-cast to <code>IDisposable</code>. If the host instance implements <code>IDisposable</code> the <code>Dispose</code> method will be called.</p><p>The following command-line arguments are available and can be viewed by running <code>Shuttle.Core.Host /?</code>:</p><div class="language-"><pre><code>    [/install [/serviceName]]    \n        - install the service\n        \n    [/displayName]                \n        - friendly name for the installed service\n        \n    [/description]                \n        - Description for the service\n        \n    [/hostType]    \n        - type implementing IHost that should be used\n        \n    [/instance]                    \n        - unique name of the instance you wish to install\n        \n    [/configurationFileName]\n        - an alternate configuration file name to use instead of {IHost.dll}.config\n\n    [/startManually]            \n        - specifies that the service should start manually\n        \n    [/username]                    \n        - username of the account to use for the service\n        \n    [/password]]                \n        - password of the account to use for the service\n        \n    - or -\n    \n    [/uninstall [/serviceName] [/instance]]    \n</code></pre></div><h2 id="ihost" tabindex="-1">IHost <a class="header-anchor" href="#ihost" aria-hidden="true">#</a></h2><p>As mentioned, if no <code>/hostType</code> is specified the folder the <code>Shuttle.Core.Host.exe</code> is in will be scanned for the class implementing <code>IHost</code>. Should no class, or more than 1 class, be located an exception will be raised.</p><h2 id="service-name" tabindex="-1">Service Name <a class="header-anchor" href="#service-name" aria-hidden="true">#</a></h2><p>If no <code>/serviceName</code> is specified the full name of the service bus host type will be used along with the version number of the assembly it is contained within.</p><div class="language-"><pre><code>    Shuttle.Application.Server.Host (1.0.0.0)\n</code></pre></div><h2 id="display-name" tabindex="-1">Display Name <a class="header-anchor" href="#display-name" aria-hidden="true">#</a></h2><p>The default for the <code>/displayName</code> is the same value as <code>/serviceName</code>, and the description defaults to a generic service bus host description.</p><h2 id="uninstall" tabindex="-1">Uninstall <a class="header-anchor" href="#uninstall" aria-hidden="true">#</a></h2><p>If you set the <code>/serviceName</code> and/or <code>/instance</code> during installation you will need to specify them when uninstalling as well, e.g.:</p><div class="language-"><pre><code>    Shuttle.Core.Host.exe \n        /uninstall \n        /serviceName:&quot;Shuttle.Application.Server&quot; \n        /instance:&quot;Instance5&quot;\n</code></pre></div><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2><div class="language-"><pre><code>Shuttle.Core.Host.exe \n    /install \n    /serviceName:&quot;Shuttle.Application.Server&quot; \n    /displayName:&quot;Shuttle server for the application&quot;\n    /description:&quot;Service to handle messages relating to the application&quot; \n    /hostType:&quot;QualifiedNamespace.Host, AssemblyName&quot;\n    /username:&quot;domain\\\\hostuser&quot;\n    /password:&quot;p@ssw0rd!&quot;\n</code></pre></div><h2 id="windowsserviceinstaller" tabindex="-1">WindowsServiceInstaller <a class="header-anchor" href="#windowsserviceinstaller" aria-hidden="true">#</a></h2><p>It is also possible to install and uninstall services that make use of <code>shuttle-core-host</code> by using the <code>WindowsServiceInstaller</code> class:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">windowsServiceInstaller</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WindowsServiceInstaller</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">installConfiguration</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InstallConfiguration</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    ServiceAssemblyPath </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@&quot;</span><span style="color:#C3E88D;">{path to your service}\\\\Shuttle.Core.Host.exe</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// more arguments may be specified</span></span>\n<span class="line"><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">windowsServiceInstaller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Install</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">installConfiguration</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">serviceInstallerConfiguration</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ServiceInstallerConfiguration</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    ServiceAssemblyPath </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@&quot;</span><span style="color:#C3E88D;">{path to your service}\\\\Shuttle.Core.Host.exe</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// more arguments may be specified</span></span>\n<span class="line"><span style="color:#89DDFF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">windowsServiceInstaller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Uninstall</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">serviceInstallerConfiguration</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div>', 29);
const _hoisted_30 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_30);
}
var shuttleCoreHost = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, shuttleCoreHost as default };
