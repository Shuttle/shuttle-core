import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode, b as createBaseVNode } from "./app.4beef326.js";
const __pageData = '{"title":"Shuttle.Core.Cron","description":"","frontmatter":{"title":"Shuttle.Core.Cron","layout":"api"},"headers":[{"level":2,"title":"CronExpression","slug":"cronexpression"},{"level":2,"title":"Cron Samples","slug":"cron-samples"}],"relativePath":"infrastructure/shuttle-core-cron.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="shuttle-core-cron" tabindex="-1">Shuttle.Core.Cron <a class="header-anchor" href="#shuttle-core-cron" aria-hidden="true">#</a></h1><div class="language-"><pre><code>PM&gt; Install-Package Shuttle.Core.Cron\n</code></pre></div><p>Provides <a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="noopener noreferrer">cron</a> expression parsing. This implementation starts from the <code>minute</code> field (so no <code>second</code>).</p><h2 id="cronexpression" tabindex="-1">CronExpression <a class="header-anchor" href="#cronexpression" aria-hidden="true">#</a></h2><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CronExpression</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">expression</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> : </span><span style="color:#F78C6C;">this</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">expression</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> DateTime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Now</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CronExpression</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">expression</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DateTime</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">date</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Creates a <code>CronExpression</code> instance and parses the given <code>expression</code>. The <code>date</code> specifies to root date from which to determine either the next or previous occurrence.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DateTime</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NextOccurrence</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"><span style="color:#A6ACCD;">public DateTime NextOccurrence</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DateTime</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">date</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Returns the next date that would follow the given <code>date</code>. If no date is provided the root date will be used. This method also sets the root date to the result.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DateTime</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetNextOccurrence</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DateTime</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">date</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Returns the next date that would follow the given <code>date</code>.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DateTime</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PreviousOccurrence</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"><span style="color:#A6ACCD;">public DateTime PreviousOccurrence</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DateTime</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">date</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Returns the previous date that would precede the given <code>date</code>. If no date is provided the root date will be used. This method also sets the root date to the result.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DateTime</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetPreviousOccurrence</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DateTime</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">date</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Returns the previous date that would precede the given <code>date</code>.</p><h2 id="cron-samples" tabindex="-1">Cron Samples <a class="header-anchor" href="#cron-samples" aria-hidden="true">#</a></h2>', 15);
const _hoisted_16 = /* @__PURE__ */ createBaseVNode("p", { "day-of-week": "" }, "Format is {minute} {hour} {day-of-month} {month}", -1);
const _hoisted_17 = /* @__PURE__ */ createBaseVNode("div", { class: "language-" }, [
  /* @__PURE__ */ createBaseVNode("pre", null, [
    /* @__PURE__ */ createBaseVNode("code", null, "{minutes} : 0-59 , - * /\n{hours} :     0-23 , - * /\n{day-of-month} 1-31 , - * ? / L W\n{month} : 1-12 or JAN-DEC    , - * /\n{day-of-week} : 1-7 or SUN-SAT , - * ? / L #\n\nExamples:\n* * * * * - is every minute of every hour of every day of every month\n5,10-12,17/5 * * * * - minute 5, 10, 11, 12, and every 5th minute after that\n")
  ])
], -1);
const _hoisted_18 = [
  _hoisted_1,
  _hoisted_16,
  _hoisted_17
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_18);
}
var shuttleCoreCron = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, shuttleCoreCron as default };
