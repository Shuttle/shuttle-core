import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app.cfdf8867.js";
const __pageData = JSON.parse('{"title":"Shuttle.Core.Mediator","description":"","frontmatter":{},"headers":[{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"IMediator","slug":"imediator","link":"#imediator","children":[{"level":3,"title":"Extensions","slug":"extensions","link":"#extensions","children":[]}]},{"level":2,"title":"IParticipant","slug":"iparticipant","link":"#iparticipant","children":[]},{"level":2,"title":"Design philosophy","slug":"design-philosophy","link":"#design-philosophy","children":[{"level":3,"title":"RequestMessage<TRequest>","slug":"requestmessage-trequest","link":"#requestmessage-trequest","children":[]},{"level":3,"title":"RequestResponseMessage<TRequest, TResponse>","slug":"requestresponsemessage-trequest-tresponse","link":"#requestresponsemessage-trequest-tresponse","children":[]}]},{"level":2,"title":"Considerations","slug":"considerations","link":"#considerations","children":[]}],"relativePath":"infrastructure/shuttle-core-mediator.md"}');
const _sfc_main = { name: "infrastructure/shuttle-core-mediator.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="shuttle-core-mediator" tabindex="-1">Shuttle.Core.Mediator <a class="header-anchor" href="#shuttle-core-mediator" aria-hidden="true">#</a></h1><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">PM&gt; Install-Package Shuttle.Core.Mediator</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>The Shuttle.Core.Mediator package provides a <a href="https://en.wikipedia.org/wiki/Mediator_pattern" target="_blank" rel="noreferrer">mediator pattern</a> implementation.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h2><p>In order to get all the relevant bits working you would need to register the <code>IMediator</code> dependency along with all the relevant <code>IParticipant</code> dependencies.</p><p>You can register the mediator using <code>IServiceCollection</code>:</p><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#A6ACCD;">services</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddMediator</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">builder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddParticipants</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">assembly</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddParticipant</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Participant</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"><span style="color:#A6ACCD;">    builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddParticipant</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">participantType</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">    builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddParticipant</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Message</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">participant</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">});</span></span>\n<span class="line"></span></code></pre></div><h2 id="imediator" tabindex="-1">IMediator <a class="header-anchor" href="#imediator" aria-hidden="true">#</a></h2><p>The core interface is the <code>IMediator</code> interface and the default implementation provided is the <code>Mediator</code> class.</p><p>This interface provides a synchronous calling mechanism and all <code>IParticipant</code> implementations need to be thread-safe singleton implementations that are added to the mediator at startup. Any operations that require transient mechanisms should be handled by the relevant participant.</p><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Send</span><span style="color:#89DDFF;">(object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">message</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CancellationToken</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">cancellationToken</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> default</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>The <code>Send</code> method will find all participants that implements the <code>IParticipant&lt;T&gt;</code> with the type <code>T</code> of the message type that you are sending. Participants that are marked with the <code>BeforeParticipantAttribute</code> filter will be executed first followed by all participants with no filter attributes and then finally all participants marked with the <code>AfterParticipantAttribute</code> filter will be called.</p><h3 id="extensions" tabindex="-1">Extensions <a class="header-anchor" href="#extensions" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SendAsync</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IMediator</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mediator</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">message</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CancellationToken</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">cancellationToken</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> default</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Sends a message asynchronously.</p><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Send</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IMediator</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mediator</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">message</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CancellationToken</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">cancellationToken</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> default</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>The same as <code>Send</code> except that it returns the given message.</p><h2 id="iparticipant" tabindex="-1">IParticipant <a class="header-anchor" href="#iparticipant" aria-hidden="true">#</a></h2><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IParticipant</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ProcessMessage</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IParticipantContext</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">context</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>A participant would handle the message that is sent using the mediator. There may be any number of participants that process the message.</p><h2 id="design-philosophy" tabindex="-1">Design philosophy <a class="header-anchor" href="#design-philosophy" aria-hidden="true">#</a></h2><p>There are no <em>request/response</em> semantics and the design philosophy here is that the message encapsulates the state that is passed along in a <em>pipes &amp; filters</em> approach.</p><p>However, you may wish to make use of one of the existing utility classes:-</p><h3 id="requestmessage-trequest" tabindex="-1">RequestMessage&lt;TRequest&gt; <a class="header-anchor" href="#requestmessage-trequest" aria-hidden="true">#</a></h3><p>The only expectation from a <code>RequestMessage&lt;TRequest&gt;</code> instance is either a success or failure (along with the failure message).</p><h3 id="requestresponsemessage-trequest-tresponse" tabindex="-1">RequestResponseMessage&lt;TRequest, TResponse&gt; <a class="header-anchor" href="#requestresponsemessage-trequest-tresponse" aria-hidden="true">#</a></h3><p>The <code>RequestResponseMessage&lt;TRequest, TResponse&gt;</code> takes an initial <code>TRequest</code> object and after the mediator processing would expect that there be a <code>TResponse</code> provided using the <code>.WithResponse(TResponse)</code> method. The same success/failure mechanism used in the <code>RequestMessage&lt;TRequest&gt;</code> class is also available on this class.</p><h2 id="considerations" tabindex="-1">Considerations <a class="header-anchor" href="#considerations" aria-hidden="true">#</a></h2><p>If you have a rather predictable sequential workflow and you require something faster execution then you may wish to consider the <a href="http://shuttle.github.io/shuttle-core/shuttle-core-pipelines" target="_blank" rel="noreferrer">Shuttle.Core.Pipelines</a> package. A performance testing application for your use-case would be able to indicate the more suitable option.</p>', 29);
const _hoisted_30 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_30);
}
const shuttleCoreMediator = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  shuttleCoreMediator as default
};
