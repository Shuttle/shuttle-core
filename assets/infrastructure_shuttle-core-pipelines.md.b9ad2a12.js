import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.5eee1682.js";
const __pageData = '{"title":"Shuttle.Core.Pipelines","description":"","frontmatter":{"title":"Shuttle.Core.Pipelines","layout":"api"},"headers":[{"level":2,"title":"Extending Pipelines","slug":"extending-pipelines"},{"level":2,"title":"Transactions","slug":"transactions"}],"relativePath":"infrastructure/shuttle-core-pipelines.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="shuttle-core-pipelines" tabindex="-1">Shuttle.Core.Pipelines <a class="header-anchor" href="#shuttle-core-pipelines" aria-hidden="true">#</a></h1><div class="language-"><pre><code>PM&gt; Install-Package Shuttle.Core.Pipelines\n</code></pre></div><p>Observable event-based pipelines based broadly on pipes and filters.</p><p>The <code>Pipeline</code> class is defined in the <code>Shuttle.Core.Pipelines</code> package.</p><p>A <code>Pipeline</code> is a variation of the pipes and filters pattern and consists of 1 or more stages that each contain one or more events. When the pipeline is executed each event in each stage is raised in the order that they were registered. One or more observers should be registered to handle the relevant event(s).</p><p>Each <code>Pipeline</code> always has its own state that is simply a name/value pair with some convenience methods to get and set/replace values. The <code>State</code> class will use the full type name of the object as a key should none be specified:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">State</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">list</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#89DDFF;">&lt;string&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item-1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// key = System.Collections.Generic.List`1[[System.String...]]</span></span>\n<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-key-value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WriteLine</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">List</span><span style="color:#89DDFF;">&lt;string&gt;&gt;()[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]);</span></span>\n<span class="line"><span style="color:#A6ACCD;">Console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Write</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">&lt;string&gt;(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>\n<span class="line"></span></code></pre></div><h1 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h1><p>Events <em>have</em> to derive from <code>PipelineEvent</code>.</p><p>We will use the following events:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OnAddCharacterA</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PipelineEvent</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OnAddCharacter</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PipelineEvent</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Character</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OnAddCharacter</span><span style="color:#89DDFF;">(char</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">character</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        Character </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> character</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>The <code>OnAddCharacterA</code> event represents a very explicit event whereas with the <code>OnAddCharacter</code> event one can specify some data. In this case the character to add.</p><p>In order for the pipeline to process the events we will have to define one or more observers to handle the events. We will define only one for this sample but we could very easily add another that will handle one or more of the same, or other, events:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CharacterPipelineObserver</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">IPipelineObserver</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">OnAddCharacterA</span><span style="color:#89DDFF;">&gt;,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">IPipelineObserver</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">OnAddCharacter</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Execute</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">OnAddCharacterA</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pipelineEvent</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pipelineEvent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Pipeline</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">&lt;string&gt;(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Format</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0}-A</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Replace</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Execute</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">OnAddCharacter</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pipelineEvent</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pipelineEvent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Pipeline</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">&lt;string&gt;(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Format</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0}-{1}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pipelineEvent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Character</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Replace</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>Next we will define the pipeline itself:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pipeline</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Pipeline</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">pipeline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RegisterStage</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">process</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithEvent</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">OnAddCharacterA</span><span style="color:#89DDFF;">&gt;()</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithEvent</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OnAddCharacter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Z</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">pipeline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RegisterObserver</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CharacterPipelineObserver</span><span style="color:#89DDFF;">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">pipeline</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">pipeline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Execute</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WriteLine</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pipeline</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">&lt;string&gt;(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// outputs start-A-Z</span></span>\n<span class="line"></span></code></pre></div><p>We can now execute this pipeline with predictable results.</p><p>Pipelines afford us the ability to better decouple functionality. This means that we could re-use the same observer in multiple pipelines enabling us to compose functionality at a more granular level.</p><h2 id="extending-pipelines" tabindex="-1">Extending Pipelines <a class="header-anchor" href="#extending-pipelines" aria-hidden="true">#</a></h2><p>Pipelines are usually instantiated using an implementation of the <code>IPipelineFactory</code> interface which would also provide you with the following event handlers:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#A6ACCD;">event </span><span style="color:#FFCB6B;">EventHandler</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">PipelineEventArgs</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PipelineCreated</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">event </span><span style="color:#FFCB6B;">EventHandler</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">PipelineEventArgs</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PipelineObtained</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">event </span><span style="color:#FFCB6B;">EventHandler</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">PipelineEventArgs</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PipelineReleased</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><p>We would make any alterations to a pipeline, such as adding an observer, when a <code>PipelineCreated</code> event is raised. An example of how one may go about doing is is available in the <a href="https://github.com/Shuttle/Shuttle.Esb.Module.ActiveTimeRange" target="_blank" rel="noopener noreferrer">Shuttle.Esb.Module.ActiveTimeRange</a> repository:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> Shuttle.Core.Contract</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> Shuttle.Core.Pipelines</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> Shuttle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Esb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Module</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ActiveTimeRange</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActiveTimeRangeModule</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActiveTimeRange</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_activeTimeRange</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_shutdownPipelineName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">ShutdownPipeline</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">FullName</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_startupPipelineName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">StartupPipeline</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">FullName</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ActiveTimeRangeModule</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IPipelineFactory</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pipelineFactory</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">IActiveTimeRangeConfiguration</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">activeTimeRangeConfiguration</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">            Guard</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AgainstNull</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pipelineFactory</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">nameof</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pipelineFactory</span><span style="color:#89DDFF;">));</span></span>\n<span class="line"><span style="color:#A6ACCD;">            Guard</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AgainstNull</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">activeTimeRangeConfiguration</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">nameof</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">activeTimeRangeConfiguration</span><span style="color:#89DDFF;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">            _activeTimeRange </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> activeTimeRangeConfiguration</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateActiveTimeRange</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">            pipelineFactory</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PipelineCreated </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> PipelineCreated</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PipelineCreated</span><span style="color:#89DDFF;">(object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sender</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PipelineEventArgs</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">e</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pipelineName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Pipeline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetType</span><span style="color:#89DDFF;">().</span><span style="color:#A6ACCD;">FullName </span><span style="color:#89DDFF;">??</span><span style="color:#A6ACCD;"> string</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Empty</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pipelineName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Equals</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">_startupPipelineName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> StringComparison</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">InvariantCultureIgnoreCase</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">||</span></span>\n<span class="line"><span style="color:#A6ACCD;">                pipelineName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Equals</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">_shutdownPipelineName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> StringComparison</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">InvariantCultureIgnoreCase</span><span style="color:#89DDFF;">))</span></span>\n<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">            e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Pipeline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RegisterObserver</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActiveTimeRangeObserver</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">_activeTimeRange</span><span style="color:#89DDFF;">));</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h2 id="transactions" tabindex="-1">Transactions <a class="header-anchor" href="#transactions" aria-hidden="true">#</a></h2><p>The following provides a pipeline observer to handle transaction scopes.</p><div class="language-"><pre><code>PM&gt; Install-Package Shuttle.Core.Transactions\n</code></pre></div>', 26);
const _hoisted_27 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_27);
}
var shuttleCorePipelines = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, shuttleCorePipelines as default };
